
variables:
  VERBOSITY: normal
  BUILD_NUMBER: $[counter('$(Build.SourceBranchName)_counter', 1)]
  MONO_VERSION: 5_18_1
  XCODE_VERSION: 10.2.1
  API_TOOLS_VERSION: 1.0.2-preview.5
  BINDERATOR_VERSION: 0.2.0
  DOTNET_CORE_VERSION: 2.2.x
  # PACKAGE_VERSION_SUFFIX: <string>
  # XAMARIN_ANDROID_PATH: <path to Xamarin.Android>

resources:
  repositories:
    - repository: xamarin-templatesn
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

jobs:
  - job: build
    strategy:
      matrix:
        macos:
          imageName: macos-10.14
        windows:
          imageName: vs2017-win2016
    displayName: 'Build'
    pool:
      name: $(imageName)
    steps:
      - powershell: echo "Hello World!"

# jobs:

#   # run the build
#   - job: build
#     strategy:
#       matrix:
#         macos:
#           imageName: macos-10.14
#         windows:
#           imageName: vs2017-win2016
#     displayName: 'Build'
#     pool:
#       name: $(imageName)
#     steps:
#       # install xamarin
#       - bash: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MONO_VERSION)
#         displayName: 'Switch to the latest Xamarin SDK'
#         condition: eq(variables['System.JobName'], 'macos')
#       - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XCODE_VERSION).app;sudo xcode-select --switch /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
#         displayName: 'Switch to the latest Xcode'
#         condition: eq(variables['System.JobName'], 'macos')
#       # install dotnet and tools
#       - bash: echo '##vso[task.setvariable variable=PATH;]'$PATH:$HOME/.dotnet/tools
#         displayName: 'Add ~/.dotnet/tools to the PATH environment variable'
#         condition: eq(variables['System.JobName'], 'macos')
#       - task: UseDotNet@2
#         displayName: 'Use the correct version of the .NET Core SDK'
#         condition: eq(variables['System.JobName'], 'macos')
#         inputs:
#           version: $(DOTNET_CORE_VERSION)
#       - powershell: dotnet tool install -g api-tools --version $(API_TOOLS_VERSION)
#         displayName: 'Install api-tools'
#       - powershell: dotnet tool install -g xamarin.androidbinderator.tool --version $(BINDERATOR_VERSION)
#         displayName: 'Install xamarin-android-binderator'
#       - powershell: dotnet tool install -g xamarin.androidx.migration.tool --version $(BINDERATOR_VERSION)
#         displayName: 'Install androidx-migrator'
#       # run the main build
#       - powershell: .\build.ps1 --target=ci --verbosity=$(VERBOSITY)
#         displayName: 'Run build'
#       # publish the nugets
#       - task: PublishBuildArtifacts@1
#         condition: eq(variables['System.JobName'], 'macos')
#         displayName: 'Publish artifacts'
#         inputs:
#           PathToPublish: output
#           ArtifactName: nuget
#       # publish the output with the os name
#       - task: PublishBuildArtifacts@1
#         displayName: 'Publish artifacts'
#         inputs:
#           PathToPublish: output
#           ArtifactName: 'output-$(System.JobName)'

#   # only sign the packages when running on Windows, and using the private server which has the certificates
#   - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
#     - job: signing
#       displayName: Signing NuGets
#       variables:
#         skipComponentGovernanceDetection: true
#       dependsOn: build
#       pool:
#         name: VSEng-XamarinCustom
#         demands:
#           - corpnet
#       condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['CodeSign'], 'true')))
#       steps:
#         # don't checkout code and sign the packages
#         - checkout: none
#         - template: sign-artifacts.yml@xamarin-templates
#           parameters:
#             targetFolder: '$(Build.ArtifactStagingDirectory)/signed'
#         # publish the signed packages
#         - task: PublishBuildArtifacts@1
#           displayName: 'Publish Signed NuGets'
#           inputs:
#             artifactName: nuget-signed
#             pathToPublish: '$(Build.ArtifactStagingDirectory)/signed'
